# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = []
c['slaves'].append(BuildSlave("aristotle-slave", "XXXXXX"))
c['slaves'].append(BuildSlave("cicero-slave", "XXXXXX"))

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []
c['change_source'].append(GitPoller(
        'git://github.com/opencog/opencog.git',
        workdir='gitpoller-workdir', branch='master', pollinterval=10*60))
c['change_source'].append(GitPoller(
        'git://github.com/opencog/unity3d-opencog-world.git',
        workdir='gitpoller-workdir-unity3d-opencog-world', branch='master', pollinterval=10*60))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter
c['schedulers'] = []
c['schedulers'].append(SingleBranchScheduler(
                            name="all",
                            change_filter=filter.ChangeFilter(branch='master'),
                            treeStableTimer=5*60,
                            builderNames=["opencog_master","doxygen"]))
c['schedulers'].append(ForceScheduler(
                            name="force",
                            builderNames=["opencog_master","doxygen"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand, Configure, Compile, Test

import os.path

cmake_build_dir = "bin"

opencog_master = BuildFactory()
opencog_master.addStep(Git(repourl='git://github.com/opencog/opencog.git', mode='full'))
opencog_master.addStep(ShellCommand(description=["copy","test config"],command=["cp", "../../opencog-test.conf", "lib/."]))
opencog_master.addStep(ShellCommand(command=["mkdir","-p",
            cmake_build_dir],want_stdout=False,
            description="mkbuilddir"))
opencog_master.addStep(Configure(workdir=os.path.join("build",cmake_build_dir), command=["cmake", "..", "-DBOOST_ROOT=/usr/local"]))
opencog_master.addStep(Compile(workdir=os.path.join("build",cmake_build_dir),
            command=["make", "-j8"]))
opencog_master.addStep(Compile(workdir=os.path.join("build",cmake_build_dir),
            command=["make", "examples"],
            description=["compiling","examples"]))
opencog_master.addStep(Test(workdir=os.path.join("build",cmake_build_dir),
            command=["make", "tests"],
            description=["compiling","tests"]))
opencog_master.addStep(Test(workdir=os.path.join("build",cmake_build_dir),timeout=5400))

doxygen = BuildFactory()
doxygen.addStep(Git(repourl='git://github.com/opencog/opencog.git', mode='full'))
doxygen.addStep(Configure(command=["cmake", "."]))
doxygen.addStep(Compile(  command=["make", "doxygen"], description=["making","documentation"]))

from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(
    BuilderConfig(name="opencog_master",
      slavenames=["aristotle-slave"],
      factory=opencog_master))
c['builders'].append(
    BuilderConfig(name="doxygen",
      slavenames=["aristotle-slave"],
      factory=doxygen))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    # auth=auth.BasicAuth([("pyflakes","pyflakes")]),
    gracefulShutdown = False,
    # forceBuild = 'auth', # use this to test your slave once it is set up
    forceBuild = True,
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

from buildbot.status import words
irc = words.IRC("irc.freenode.org", "opencog-buildbot",
		useColors=True,
                channels=[{"channel":  "opencog"}],
#                         {"password": "XXXXXX" }],
		password="XXXXXX",
		allowForce=True,
                notify_events={
                  'started': 1,
                  'finished': 1,
                  'exception': 1,
                  'successToFailure': 1,
                  'failureToSuccess': 1,
                })
c['status'].append(irc)


####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "OpenCog"
c['titleURL'] = "http://opencog.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://158.132.219.213:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
