c = BuildmasterConfig = {}

####### BUILDSLAVES

from buildbot.buildslave import BuildSlave
c['slaves'] = []
c['slaves'].append(BuildSlave("aristotle-slave", "XXXXXX"))
c['slaves'].append(BuildSlave("cicero-slave", "XXXXXX"))

c['slavePortnum'] = 9989

####### CHANGESOURCES

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []
c['change_source'].append(GitPoller(
        'git://github.com/opencog/opencog.git',
        workdir='gitpoller-workdir', branch='master', pollinterval=10*60))
c['change_source'].append(GitPoller(
        'git://github.com/opencog/unity3d-opencog-world.git',
        workdir='gitpoller-workdir-unity3d-opencog-world', branch='master', pollinterval=10*60))

####### SCHEDULERS

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter
c['schedulers'] = []
c['schedulers'].append(SingleBranchScheduler(
                            name="all",
                            change_filter=filter.ChangeFilter(branch='master'),
                            treeStableTimer=5*60,
                            builderNames=["opencog_master","doxygen"]))
c['schedulers'].append(ForceScheduler(
                            name="force",
                            builderNames=["opencog_master","doxygen","unity3d_world"]))

####### BUILDERS

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand, Configure, Compile, Test
from buildbot.process.properties import Property

import os.path

cmake_build_dir = "bin"

opencog_master = BuildFactory()
opencog_master.addStep(Git(repourl='git://github.com/opencog/opencog.git', mode='full'))
opencog_master.addStep(ShellCommand(description=["copy","test config"],command=["cp", "../../opencog-test.conf.example", "lib/opencog-test.conf"]))
opencog_master.addStep(ShellCommand(command=["mkdir","-p",
            cmake_build_dir],want_stdout=False,
            description="mkbuilddir"))
opencog_master.addStep(Configure(workdir=os.path.join("build",cmake_build_dir), command=["cmake", ".."]))
opencog_master.addStep(Compile(workdir=os.path.join("build",cmake_build_dir),
            command=["make", "-j8"]))
opencog_master.addStep(Compile(workdir=os.path.join("build",cmake_build_dir),
            command=["make", "examples"],
            description=["compiling","examples"]))
opencog_master.addStep(Test(workdir=os.path.join("build",cmake_build_dir),
            command=["make", "tests"],
            description=["compiling","tests"]))

unity3d_world = BuildFactory()
unity3d_world.addStep(Git(repourl='git://github.com/opencog/unity3d-opencog-world', mode='full', branch='master'))

unity3d_world.addStep(ShellCommand(workdir="unity3d-world", 
           description=["Unity Environment Dump"],
           command=['echo', 'buildername', 'workdir', Property('workdir') ] ))

unity3d_world.addStep(ShellCommand(workdir="unity3d-world", 
           description=["Test Windows Command"],
           command=[r'C:\cygwin\bin\ls.exe']))

unity3d_world.addStep(ShellCommand(workdir="unity3d-world", 
            description=["Unity Player Windows32"],
            command=[r'C:\Unity\Editor\Unity.exe', "-batchMode", "-quit", "-nographics", "-projectPath", repr(Property('workdir')) + r'\build', "-executeMethod", "AutomationManager.BuildStandaloneWindowsPlayer"]))

unity3d_world.addStep(ShellCommand(workdir="unity3d-world", 
            description=["Unity Player Linux64"],
            command=[r'C:\Unity\Editor\Unity.exe', "-batchMode", "-quit", "-nographics", "-projectPath", repr(Property('workdir')) + r'\build', "-executeMethod", "AutomationManager.BuildStandaloneLinux64Player"]))

doxygen = BuildFactory()
doxygen.addStep(Git(repourl='git://github.com/opencog/opencog.git', mode='full'))
doxygen.addStep(Configure(command=["cmake", "."]))
doxygen.addStep(Compile(  command=["make", "doxygen"], description=["making","documentation"]))

from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(
    BuilderConfig(name="opencog_master",
      slavenames=["aristotle-slave"],
      factory=opencog_master))
c['builders'].append(
    BuilderConfig(name="doxygen",
      slavenames=["aristotle-slave"],
      factory=doxygen))
c['builders'].append(
    BuilderConfig(name="unity3d_world",
      slavenames=["cicero-slave"],
      factory=unity3d_world))

####### STATUS TARGETS

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    # auth=auth.BasicAuth([("pyflakes","pyflakes")]),
    gracefulShutdown = False,
    # forceBuild = 'auth', # use this to test your slave once it is set up
    forceBuild = True,
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

from buildbot.status import words
irc = words.IRC("irc.freenode.org", "opencog-buildbot",
		useColors=True,
                channels=[{"channel":  "opencog"}],
#                         {"password": "XXXXXX" }],
		password="XXXXXX",
		allowForce=True,
                notify_events={
#                 'started': 1,
#                 'finished': 1,
                  'exception': 1,
                  'successToFailure': 1,
                  'failureToSuccess': 1,
                })
c['status'].append(irc)


####### PROJECT IDENTITY

c['title'] = "OpenCog"
c['titleURL'] = "http://opencog.org"

c['buildbotURL'] = "http://158.132.219.213:8010/"

####### DB URL

c['db'] = {
    'db_url' : "sqlite:///state.sqlite",
}
